% raw_ecg_per_dose = cell(1, length(dosage_levels));
% raw_ecg_per_dose{1, d} = [ecg_mat(raw_start_time:raw_end_time, 7)];
%{
p=100;r=rand(1,p);x=2*r-1;y=r+2;z=3-r;
scatter3(x,y,z,3*ones(1,p),2*[1:p]/p-1);view(-30,10);
x=x-mean(x);y=y-mean(y);z=z-mean(z);
A=[x;y;z];[U,S,V]=svds(A);
hold on;
scatter3(x,y,z,3*ones(1,p),U(:,1)'*A);

[U, S, V] = svds(interpolated_ecg(:, 1:250), 200);
figure(); bar(diag(log(S)));
xlabel('Count');
ylabel('log(singular values)');
title('Interpolated ECG, 200 singular values, log scale');

ipol_svd_ecg = zeros(size(interpolated_ecg, 1), top_how_many);
for i = 1:top_how_many
	ipol_svd_ecg = ipol_svd_ecg + (S(i, i) .* (U(:, i) * V(:, i)'));
end
cutoff_freq = linspace(0.01, 0.99, 1000);
perf = zeros(1000, 4);
for i=1:1000
	yhat = fz > cutoff_freq(i);
	w = complete_test_set(:, end) == 1;
	sensitivity = mean(yhat(w) == 1); 
	specificity = mean(yhat(~w) == 0); 
	c_rate = mean(complete_test_set(:, end) == yhat'); 
	d = [sensitivity, specificity] - [1, 1];
	d = sqrt(d(1)^2 + d(2)^2); 
	perf(i, :) = [sensitivity, specificity, c_rate, d];
	keyboard
end

figure();
plot(cutoff_freq, perf(:, 1), 'b-'); hold on;
plot(cutoff_freq, perf(:, 2), 'r-');
plot(cutoff_freq, perf(:, 3), 'k-');
plot(cutoff_freq, perf(:, 4), 'g-');

keyboard
figure('visible', 'off'); set(gcf, 'Position', [10, 10, 1200, 800]);
plot(log(latent));
xlabel('Principal components'); ylabel('log(eigenvalues)'); title(sprintf('PCA on interpolated ECG b/w RR'));
file_name = sprintf('%s/subj_%s_rr_pca', write_dir, subject_id);
savesamesize(gcf, 'file', file_name, 'format', sprintf('-d%s', image_format));

%}

%{

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function[summ_idx, behav_idx] = find_index(summary_mat, behav_mat, type)

if strcmp(type, 'start')
	if summary_mat(1, 1) < behav_mat(1, 1) | (summary_mat(1, 1) == behav_mat(1, 1) & summary_mat(1, 2) < behav_mat(1, 2))
		% summary came first
		keyboard
	else
		% behav came first
		% Taking the first time point in the summary mat and repmat'ing it
		temp_mat = repmat(summary_mat(1, :), size(behav_mat, 1), 1);
		% Findind the behavior mat's index that matches with hh:mm of first time in summary mat
		behav_idx = intersect(find(behav_mat(:, 1) == temp_mat(:, 1)), find(behav_mat(:, 2) == temp_mat(:, 2))) + 1;
		summ_idx = 1 + (60 - round_to(summary_mat(1, 3), 0));
	end
else
	if behav_mat(1, 1) < summary_mat(1, 1) | (behav_mat(1, 1) == summary_mat(1, 1) & behav_mat(1, 2) < summary_mat(1, 2))
		% behav ended first
		temp_mat = repmat(behav_mat(end, :), size(summary_mat, 1), 1);
		summ_idx = intersect(find(summary_mat(:, 1) == temp_mat(:, 1)), find(summary_mat(:, 2) == temp_mat(:, 2)));
		summ_idx = summ_idx(end);
		behav_idx = size(behav_mat, 1);
	else
		% summary ended first
		keyboard
	end
end

Activity and 3d acc plots - not so interesting since subjects are stationary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure(); set(gcf, 'Position', [10, 10, 1200, 800]);

subplot(2, 1, 1);
plot(summary_mat(:, data_mat_columns.activity), 'b-'); hold on;
plot(summary_mat(:, data_mat_columns.peak_acc), 'g-');
ylabel('Activity/Peak acc');
xlabel('Time(seconds)');
legend('Activity', 'Peak Acc', 'Location', 'NorthWest', 'Orientation', 'Horizontal');
grid on; set(gca, 'Layer', 'top');
title(sprintf('Subject %s', strrep(subject_id, '_', '-')));

subplot(2, 1, 2);
plot(summary_mat(:, data_mat_columns.vertical(1)), 'b-'); hold on;
plot(summary_mat(:, data_mat_columns.vertical(2)), 'b--');
plot(summary_mat(:, data_mat_columns.lateral(1)), 'g-');
plot(summary_mat(:, data_mat_columns.lateral(2)), 'g--');
plot(summary_mat(:, data_mat_columns.saggital(1)), 'm-');
plot(summary_mat(:, data_mat_columns.saggital(2)), 'm--');
ylabel('Acc');
xlabel('Time(seconds)');
legend('Vmin', 'Vpeak', 'Lmin', 'Lpeak', 'Smin', 'Speak', 'Location', 'NorthWest', 'Orientation', 'Horizontal');
grid on; set(gca, 'Layer', 'top');

file_name = sprintf('%s/subject_%s_summary_3', write_dir, subject_id);
savesamesize(gcf, 'file', file_name, 'format', sprintf('-d%s', image_format));

disp(sprintf('%s\tLab\t%d/%d/%d-%d:%d:%0.3f\t%d/%d/%d %d:%d:%0.3f\t%d\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f\t%0.4f',...
	subject_id, summary_mat(1, 1), summary_mat(1, 2), summary_mat(1, 3),...
	summary_mat(1, 4), summary_mat(1, 5), summary_mat(1, 6),...
	summary_mat(end, 1), summary_mat(end, 2), summary_mat(end, 3),...
	summary_mat(end, 4), summary_mat(end, 5), summary_mat(end, 6),...
	size(summary_mat, 1),...
	min(summary_mat(:, data_mat_columns.HR)), max(summary_mat(:, data_mat_columns.HR)),...
	min(summary_mat(:, data_mat_columns.BR)), max(summary_mat(:, data_mat_columns.BR)),...
	min(summary_mat(:, data_mat_columns.ECG_amp)), max(summary_mat(:, data_mat_columns.ECG_amp)),...
	min(summary_mat(:, data_mat_columns.ECG_noise)), max(summary_mat(:, data_mat_columns.ECG_noise)),...
	min(summary_mat(:, data_mat_columns.activity)), max(summary_mat(:, data_mat_columns.activity)),...
	min(summary_mat(:, data_mat_columns.peak_acc)), max(summary_mat(:, data_mat_columns.peak_acc)),...
	min(summary_mat(:, data_mat_columns.vertical(1))), max(summary_mat(:, data_mat_columns.vertical(2))),...
	min(summary_mat(:, data_mat_columns.lateral(1))), max(summary_mat(:, data_mat_columns.lateral(2))),...
	min(summary_mat(:, data_mat_columns.saggital(1))), max(summary_mat(:, data_mat_columns.saggital(2)))));


if earliest_start_time(3) ~= 0
	time1 = sprintf('%d:%d:%d', earliest_start_time(1), earliest_start_time(2), earliest_start_time(3));
	time2 = sprintf('00:00:%d', earliest_start_time(3));
	temp = datestr(datenum(time1) - datenum(time2), 13);
	earliest_start_time(1) = str2num(temp(1:2));
	earliest_start_time(2) = str2num(temp(4:5));
	earliest_start_time(3) = str2num(temp(7:8));
end

if latest_end_time(3) ~= 59
	time1 = sprintf('%d:%d:%d', latest_end_time(1), latest_end_time(2), latest_end_time(3));
	time2 = sprintf('00:00:%d', 59 - latest_end_time(3));
	temp = datestr(datenum(time1) + datenum(time2), 13);
	latest_end_time(1) = str2num(temp(1:2));
	latest_end_time(2) = str2num(temp(4:5));
	latest_end_time(3) = str2num(temp(7:8));
end

index_maps = struct();
index_maps.time_axis = 1:how_many_seconds_have_elapsed(earliest_start_time, latest_end_time);
index_maps.summary = [how_many_seconds_have_elapsed(earliest_start_time, summary_mat(1, 4:6)):...
		      how_many_seconds_have_elapsed(earliest_start_time, summary_mat(end, 4:6))];
index_maps.behav = [how_many_seconds_have_elapsed(earliest_start_time, [behav_mat(1, 3:4), 0]),...
     		    how_many_seconds_have_elapsed(earliest_start_time, [behav_mat(end, 3:4), 59])];

[summ_start_idx, behav_start_idx] = find_index(summary_mat(:, 4:6), behav_mat(:, 3:4), 'start');
[summ_end_idx, behav_end_idx] = find_index(summary_mat(:, 4:6), behav_mat(:, 3:4), 'end');
summ_behav_mapping = summ_start_idx:60:summ_end_idx;
desired_behav_idx = behav_start_idx:1:behav_end_idx;

%}

f=fft(ecg_mat(9100*250:9200*250, 7));                   
plot(abs(f(2:end))')  
[foo,freq]=max(abs(f(2:end))); rate = freq/100*60



MATLABMathematicsFourier Analysis and Filtering
fft

Fast Fourier transform

Syntax
Y = fft(x)
Y = fft(X,n)
Y = fft(X,[],dim)
Y = fft(X,n,dim)

Definitions

The functions Y = fft(x) and y = ifft(X) implement the transform and inverse transform pair given for vectors of length N by:



where



is an Nth root of unity.

Description

Y = fft(x) returns the discrete Fourier transform (DFT) of vector x, computed with a fast Fourier transform (FFT) algorithm.

If the input X is a matrix, Y = fft(X) returns the Fourier transform of each column of the matrix.

If the input X is a multidimensional array, fft operates on the first nonsingleton dimension.

Y = fft(X,n) returns the n-point DFT. fft(X) is equivalent to fft(X, n) where n is the size of X in the first nonsingleton dimension. If the length of X is less than n, X is padded with trailing zeros to length n. If the length of X is greater than n, the sequence X is truncated. When X is a matrix, the length of the columns are adjusted in the same manner.

Y = fft(X,[],dim) and Y = fft(X,n,dim) applies the FFT operation across the dimension dim.

Examples

A common use of Fourier transforms is to find the frequency components of a signal buried in a noisy time domain signal. Consider data sampled at 1000 Hz. Form a signal containing a 50 Hz sinusoid of amplitude 0.7 and 120 Hz sinusoid of amplitude 1 and corrupt it with some zero-mean random noise:

Fs = 1000;                    % Sampling frequency
T = 1/Fs;                     % Sample time
L = 1000;                     % Length of signal
t = (0:L-1)*T;                % Time vector
% Sum of a 50 Hz sinusoid and a 120 Hz sinusoid
x = 0.7*sin(2*pi*50*t) + sin(2*pi*120*t); 
y = x + 2*randn(size(t));     % Sinusoids plus noise
plot(Fs*t(1:50),y(1:50))
title('Signal Corrupted with Zero-Mean Random Noise')
xlabel('time (milliseconds)')

It is difficult to identify the frequency components by looking at the original signal. Converting to the frequency domain, the discrete Fourier transform of the noisy signal y is found by taking the fast Fourier transform (FFT):

NFFT = 2^nextpow2(L); % Next power of 2 from length of y
Y = fft(y,NFFT)/L;
f = Fs/2*linspace(0,1,NFFT/2+1);

% Plot single-sided amplitude spectrum.
plot(f,2*abs(Y(1:NFFT/2+1))) 
title('Single-Sided Amplitude Spectrum of y(t)')
xlabel('Frequency (Hz)')
ylabel('|Y(f)|')

